package com.qianfeng.test;

public class Demo3 {
	public static void main(String[] args) {
		//都是对位直接进行运算
		//作用:直接对位进行操作,提高了计算的效率
		///位运算符 :
		//&(按位与):全1则1,有0则0
		//|(按位或):全0则0,有1则1
		//~(按位取反):1则0,0则1
		//^(按位异或):相同则0,不同则1
		byte a = 4,b =5;
		/*
		 * 0100  4
		 * 0101  5   &
		 * 0100  4
		 * 
		 * IP:192.168.1.34
		 * 子网掩码:255.255.255.0
		 * 网关:192.168.1.1
		 * 目的:让IP与网关的前三位一致
		 * 做法:让IP的对应位置与子网掩码做按位与操作
		 * 
		 * 0100  4
		 * 0101  5   |
		 * 0101  5
		 * 
		 * 00000100  ~
		 * 11111011 
		 * 
		 * 0100  4
		 * 0101  5  ^
		 * 0001  1
		 */
		
		//按位异或的实例:交换两个数的值
		//1.借助于三方变量
		int x=3,y =4;
		int temp =0;
		temp = x;
		x = y;
		y = temp;
		System.out.println("x:"+x+"  y:"+y);//x 4   y 3
		//2.利用按位异或实现
		x=x^y;
		y=x^y;
		x=x^y;
		System.out.println("x:"+x+"  y:"+y);//x  3  y 4
		/*
		 * 分析
		 * 0100  x
		 * 0011  y   ^
		 * 0111  7   x
		 * 0011  y   ^
		 * 0100  4   y
		 * 
		 * 0111  7   x
		 * 0100  4   y  ^ -- 最终值
		 * 0011  3   x---最终值
		 */
		
		//移位运算符 
		//有符号的移位运算符: >>  <<  ,向右移动一位代表除以2,向左移动一位代表乘以2
		//无符号的移位运算符: >>> 
		//注意:对于一个数,先左移再右移或者先右移再左移都不一定能得到原来的数.
		System.out.println(7>>1); //00000111  右移一位   00000011
		System.out.println(7<<1);
		
		//按照操作的元素个数,
		//注意:1目理解成元素:  2.表达式:就是一个式子,当以;结尾的时候就成为一个语句   
		//3.语句:表达式+;  ,但是只有;的时候也叫语句,我们成为空语句
		//一目运算符:++  --  +(正)  -(负)  !   ~   
		//二目运算符:+  - *  /  %  
		//三目运算符:   ?:
		//解释:表达式1 >  表达式2  ?  结果1  :  结果2
		//分析:如果表达式1比表达式2大,整个三目运算符的结果就是结果1,反之,结果就是结果2
		int w=3,q=5;
		//实例:求两个数的最大值
		int v = w>q?w:q;
		System.out.println(v);
	}
}
