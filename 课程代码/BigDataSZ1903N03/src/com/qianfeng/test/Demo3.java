package com.qianfeng.test;

public class Demo3 {
	public static void main(String[] args) {
		/*
		 * 运算符:类型和操作的元素个数分成两类
		 * 类型分类:
		 * 算数运算符: + - *  /  %  ++  --
		 * 赋值运算符: = +=  -=  *=  /=  %=
		 * 关系运算符:> >= <  <= ==  !=
		 * 逻辑运算符:&&(逻辑与)    ||(逻辑或)    !
		 * 位运算符:&(按位与)   |(按位或)   ~(按位取反)   ^(按位异或)
		 * 移位运算符:>>  >>>   <<   <<<
		 * 
		 * 按照操作的元素个数分类:
		 * 一目运算符
		 * 二目运算符
		 * 三目运算符  ?:
		 */
//		 * 算数运算符: + - *  /  %  ++  --
		System.out.println(-4/-3);//完全遵守普通的运算规则
		System.out.println(-4%-3);//在取余的时候,余数的符号跟被余数保持一致
		
		//++(自增)  --(自减)
		//++:
//		int a=1,b=2,c,d;//对于同一个类型的变量,可以一次定义多个.
//		c= a++;//变量先参与运算,再自己增加1
//		d= ++b;//先自己增加1,再参与运算
//		System.out.println("c:"+c+"   a:"+a+"   d:"+d+"  b:"+b);
//		 * 赋值运算符: = +=  -=  *=  /=  %=
		//= 右边的值赋值给左边
		//+= 相当于 +   =
		int f = 4,g;//变量必须先赋值后使用
		g=0;
		g += f;//g = g+f;
		g += f++;
		//例题:
		
		 int a =2,b=3,c=5,d=3,x=1,y=0;
		 y += (a++ - b--) + c++ * a-- - d-- / b++ ;
		 //* 结果:求y,a,b,c,d的值
		 /*
		  * 1.+=，算他的右面
		  * 2.+ - ,考虑他们的结合性,左结合性  
		  * 3.(a++ - b--)  a=3  b=2    -1
		  * 4.c++ * a--    c=6   a=2   15
		  * 5.d-- / b++    d=2   b=3   1
		  * 6.-1 + 15 - 1     13
		  * 7.y+=13     y=13
		  */
		 System.out.println(a+"  "+b+"  "+c+"   "+d+"   y:"+y);
//		 * 关系运算符:> >= <  <= ==  !=
		 // 10<a<15   a<10 或者 a> 15    计算机中
		 System.out.println(a>10 && a<15);//两边同时成立
		 System.out.println(a<10 || a>15);//只有一边成立即可
		 boolean bb = true,cc = false;
		 System.out.println(bb == cc);
//		 * 逻辑运算符:&&(逻辑与):一假则假,全真则真      ||(逻辑或):一真则真,全假则假      !:真则假,假则真
		 System.out.println(true && false && true);//false
		 System.out.println(false || false);//true
		 System.out.println(!true);
		 /*
		  * 短路与:当一个式子中有多个连续的&&,我们只需要找出第一个false,即可停止运算.因为只要有一个false,整体结果就是false
		  * 短路或:当一个式子中有多个连续的||,我们只需要找出第一个true,即可停止运算.因为只要有一个true,整体结果就是true
		  */
		 /*
		  * 问题总结:
		  * 以短路&&做例子
		  * 1.当遇到false的时候,是否停止运算?
		  * 是
		  * 2.对于连续的&&或者连续的||会使用短路&& 与短路||,但是如果一个式子中同时出现了连续的&&和||,什么情况?
		  * 只有连续的部分遵守对应的规则,之后会用整体的结果参与和面的运算
		  * 3.逻辑运算符的两边只允许使用true或false
		  */
		 int n=2,m=1,w=1;
		 boolean b3 = true && false && n++>0;
		 System.out.println("n:"+n);//2
		 boolean b4 = true && false && w++>0 || m++<0 ;
		 System.out.println("w:"+w+"   m:"+m);//w:1   m:2
//		 * 位运算符:&(按位与)   |(按位或)   ~(按位取反)   ^(按位异或)
//		 * 移位运算符:>>  >>>   <<   <<<
	}
}
