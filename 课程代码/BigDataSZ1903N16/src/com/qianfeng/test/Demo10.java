package com.qianfeng.test;
/*
  * 多线程:
 * 程序:一个可执行的文件
 * 进程:一个正在运行的程序.也可以理解成在内存中开辟了一块儿空间
 * 线程:负责程序的运行,可以看做一条执行的通道或执行单元,所以我们通常将进程的工作理解成线程的工作
 * 
 * 进程中可不可以没有线程?   必须有线程,至少有一个.当有一个线程的时候我们称为单线程(唯一的线程就是主线程).
 *                当有一个以上的线程同时存在的时候我们称为多线程.
 *                
 * 多线程的作用:为了实现同一时间干多件事情.
 * 
 * 任务区:我们将线程工作的地方称为任务区.
 * 每一个线程都有一个任务区,任务区通过对应的方法产生作用.
 * 
 * JVM默认是多线程吗?
 * 至少要有两个线程:
 * 主线程:任务区:main函数
 * 垃圾回收线程:任务区:finalize函数
 * 
 * 明天的内容:
 * 1.多线程的创建
 * 2.线程安全
 * 3.线程的通信
 * 4.单生产者单消费者
 * 5.多生产者多消费者
 * 6.Lock
 * 7.线程的停止
 * 8.线程的join方法
 * 9.线程的状态图
 * 10.线程的守护线程
 */
public class Demo10 {
	public static void main(String[] args) {//一个主线程
		new Test();
		/*
		 * 手动运行垃圾回收器
		 * 原理:当执行gc时,会触发垃圾回收机制,开启垃圾回收线程,执行finalize方法
		 * cpu的特性:多个线程之间是抢cpu的关系cpu有随机性
		 */
		System.gc();//两个线程
		
		System.out.println("main");
	}//主函数结束,主任务区结束,主线程随着任务的结束而结束,线程随着任务的开始而开始.当线程还在工作的时候,进程不能结束.
}

class Test{
	/*
	 * 重写finalize方法
	 * 正常情况下,这个函数是由系统调用的,这里只是为了更好的观察多线程的发生
	 * 当Test对象被释放的时候,会自动的调用finalize方法
	 */
	protected void finalize() throws Throwable {
		System.out.println("finalize");
	}
}
